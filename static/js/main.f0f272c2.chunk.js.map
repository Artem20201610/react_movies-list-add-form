{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FormElement/FormElement.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","urlPattern","FormElement","state","isValidInput","errorMessage","validateInput","name","value","props","setValidationResult","validationKey","setState","test","this","type","id","onChange","rows","cols","errorStyle","border","htmlFor","style","target","onBlur","React","Component","NewMovie","isFormValid","errors","isTitleValid","isImgUrlValid","isImdbUrlValid","isImdbIdValid","onFieldChange","field","reset","onSubmit","event","preventDefault","onAdd","imgdbId","validateForm","disabled","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0f272c2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FormElement.scss';\n\n// eslint-disable-next-line\nconst urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class FormElement extends React.Component {\n  state = {\n    isValidInput: true,\n    errorMessage: '',\n  }\n\n  validateInput = ({ name, value }) => {\n    const { setValidationResult, validationKey } = this.props;\n\n    if (value === '') {\n      setValidationResult(validationKey, false);\n\n      this.setState({\n        isValidInput: false,\n        errorMessage: `${name} is required`,\n      });\n\n      return;\n    }\n\n    if ((name === 'imgUrl') || (name === 'imdbUrl')) {\n      if (!urlPattern.test(value)) {\n        setValidationResult(validationKey, false);\n\n        this.setState({\n          isValidInput: false,\n          errorMessage: `${name} wrong format`,\n        });\n\n        return;\n      }\n    }\n\n    setValidationResult(validationKey, true);\n\n    this.setState({\n      isValidInput: true,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    const { type, id, name, value, onChange, rows, cols }\n    = this.props;\n\n    const errorStyle = this.state.isValidInput\n      ? {}\n      : {\n        border: `2px solid red`,\n      };\n\n    return (\n      <label htmlFor={id} className=\"addMovieForm__label\">\n        {name}\n        :\n        {type === 'text'\n          ? (\n            <div className=\"addMovieForm__container\">\n              <input\n                type=\"text\"\n                id={id}\n                name={name}\n                value={value}\n                style={errorStyle}\n                onChange={({ target }) => {\n                  onChange(target.name, target.value);\n                }}\n                onBlur={({ target }) => {\n                  this.validateInput(target);\n                }}\n              />\n              <span>{this.state.errorMessage}</span>\n            </div>\n          )\n          : (\n            <textarea\n              id={id}\n              name={name}\n              value={value}\n              cols={cols}\n              rows={rows}\n              onChange={({ target }) => {\n                onChange(target.name, target.value);\n              }}\n            />\n          )}\n      </label>\n    );\n  }\n}\n\nFormElement.propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  validationKey: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  setValidationResult: PropTypes.func,\n  rows: PropTypes.number,\n  cols: PropTypes.number,\n};\n\nFormElement.defaultProps = {\n  rows: 8,\n  cols: 23,\n  setValidationResult: () => {},\n  validationKey: '',\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormElement } from '../FormElement/FormElement';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isFormValid: false,\n    errors: {\n      isTitleValid: false,\n      isImgUrlValid: false,\n      isImdbUrlValid: false,\n      isImdbIdValid: false,\n    },\n  };\n\n  onFieldChange = (field, value) => {\n    this.setState({\n      [field]: value,\n    });\n  }\n\n  reset = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      isFormValid: false,\n      errors: {\n        isTitleValid: false,\n        isImgUrlValid: false,\n        isImdbUrlValid: false,\n        isImdbIdValid: false,\n      },\n    });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    const { onAdd } = this.props;\n    const movie = {\n      title: this.state.title,\n      description: this.state.description,\n      imgUrl: this.state.imgUrl,\n      imdbUrl: this.state.imdbUrl,\n      imgdbId: this.state.imdbId,\n    };\n\n    onAdd(movie);\n    this.reset();\n  }\n\n  validateInput = (field, value) => {\n    this.setState(state => (\n      {\n        errors: {\n          ...state.errors,\n          [field]: value,\n        },\n      }\n    ));\n\n    this.setState(state => ({\n      isFormValid: this.validateForm(state),\n    }));\n  }\n\n  validateForm = (state) => {\n    return state.errors.isTitleValid && state.errors.isImgUrlValid\n    && state.errors.isImdbUrlValid\n    && state.errors.isImdbIdValid;\n  }\n\n  render() {\n    return (\n      <form\n        className=\"addMovieForm\"\n        onSubmit={this.onSubmit}\n      >\n        <FormElement\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={this.state.title}\n          validationKey=\"isTitleValid\"\n          onChange={this.onFieldChange}\n          setValidationResult={this.validateInput}\n        />\n        <FormElement\n          type=\"textarea\"\n          id=\"description\"\n          name=\"description\"\n          value={this.state.description}\n          onChange={this.onFieldChange}\n        />\n        <FormElement\n          type=\"text\"\n          id=\"imgUrl\"\n          name=\"imgUrl\"\n          value={this.state.imgUrl}\n          validationKey=\"isImgUrlValid\"\n          onChange={this.onFieldChange}\n          setValidationResult={this.validateInput}\n        />\n        <FormElement\n          type=\"text\"\n          id=\"imdbUrl\"\n          name=\"imdbUrl\"\n          value={this.state.imdbUrl}\n          validationKey=\"isImdbUrlValid\"\n          onChange={this.onFieldChange}\n          setValidationResult={this.validateInput}\n        />\n        <FormElement\n          type=\"text\"\n          id=\"imdbId\"\n          name=\"imdbId\"\n          value={this.state.imdbId}\n          validationKey=\"isImdbIdValid\"\n          onChange={this.onFieldChange}\n          setValidationResult={this.validateInput}\n        />\n        <button\n          type=\"submit\"\n          className=\"addMovieForm__submit\"\n          disabled={!this.state.isFormValid}\n        >\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => (\n      {\n        movies: [...state.movies, movie],\n      }\n    ));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}